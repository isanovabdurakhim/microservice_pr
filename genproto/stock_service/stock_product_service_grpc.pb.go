// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: stock_product_service.proto

package stock_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockProductServiceClient is the client API for StockProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockProductServiceClient interface {
	Create(ctx context.Context, in *CreateStockProduct, opts ...grpc.CallOption) (*StockProduct, error)
	GetById(ctx context.Context, in *StockProductPrimaryKey, opts ...grpc.CallOption) (*StockProduct, error)
	GetList(ctx context.Context, in *GetListStockProductRequest, opts ...grpc.CallOption) (*GetListStockProductResponse, error)
	Update(ctx context.Context, in *UpdateStockProduct, opts ...grpc.CallOption) (*StockProduct, error)
	Delete(ctx context.Context, in *StockProductPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
}

type stockProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockProductServiceClient(cc grpc.ClientConnInterface) StockProductServiceClient {
	return &stockProductServiceClient{cc}
}

func (c *stockProductServiceClient) Create(ctx context.Context, in *CreateStockProduct, opts ...grpc.CallOption) (*StockProduct, error) {
	out := new(StockProduct)
	err := c.cc.Invoke(ctx, "/stock_service.StockProductService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockProductServiceClient) GetById(ctx context.Context, in *StockProductPrimaryKey, opts ...grpc.CallOption) (*StockProduct, error) {
	out := new(StockProduct)
	err := c.cc.Invoke(ctx, "/stock_service.StockProductService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockProductServiceClient) GetList(ctx context.Context, in *GetListStockProductRequest, opts ...grpc.CallOption) (*GetListStockProductResponse, error) {
	out := new(GetListStockProductResponse)
	err := c.cc.Invoke(ctx, "/stock_service.StockProductService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockProductServiceClient) Update(ctx context.Context, in *UpdateStockProduct, opts ...grpc.CallOption) (*StockProduct, error) {
	out := new(StockProduct)
	err := c.cc.Invoke(ctx, "/stock_service.StockProductService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockProductServiceClient) Delete(ctx context.Context, in *StockProductPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stock_service.StockProductService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockProductServiceServer is the server API for StockProductService service.
// All implementations must embed UnimplementedStockProductServiceServer
// for forward compatibility
type StockProductServiceServer interface {
	Create(context.Context, *CreateStockProduct) (*StockProduct, error)
	GetById(context.Context, *StockProductPrimaryKey) (*StockProduct, error)
	GetList(context.Context, *GetListStockProductRequest) (*GetListStockProductResponse, error)
	Update(context.Context, *UpdateStockProduct) (*StockProduct, error)
	Delete(context.Context, *StockProductPrimaryKey) (*empty.Empty, error)
	mustEmbedUnimplementedStockProductServiceServer()
}

// UnimplementedStockProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockProductServiceServer struct {
}

func (UnimplementedStockProductServiceServer) Create(context.Context, *CreateStockProduct) (*StockProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStockProductServiceServer) GetById(context.Context, *StockProductPrimaryKey) (*StockProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedStockProductServiceServer) GetList(context.Context, *GetListStockProductRequest) (*GetListStockProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedStockProductServiceServer) Update(context.Context, *UpdateStockProduct) (*StockProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStockProductServiceServer) Delete(context.Context, *StockProductPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStockProductServiceServer) mustEmbedUnimplementedStockProductServiceServer() {}

// UnsafeStockProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockProductServiceServer will
// result in compilation errors.
type UnsafeStockProductServiceServer interface {
	mustEmbedUnimplementedStockProductServiceServer()
}

func RegisterStockProductServiceServer(s grpc.ServiceRegistrar, srv StockProductServiceServer) {
	s.RegisterService(&StockProductService_ServiceDesc, srv)
}

func _StockProductService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockProductServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.StockProductService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockProductServiceServer).Create(ctx, req.(*CreateStockProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockProductService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockProductPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockProductServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.StockProductService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockProductServiceServer).GetById(ctx, req.(*StockProductPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockProductService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListStockProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockProductServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.StockProductService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockProductServiceServer).GetList(ctx, req.(*GetListStockProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.StockProductService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockProductServiceServer).Update(ctx, req.(*UpdateStockProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockProductPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.StockProductService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockProductServiceServer).Delete(ctx, req.(*StockProductPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// StockProductService_ServiceDesc is the grpc.ServiceDesc for StockProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock_service.StockProductService",
	HandlerType: (*StockProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StockProductService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _StockProductService_GetById_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _StockProductService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StockProductService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StockProductService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock_product_service.proto",
}
