// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: coming_product_serivce.proto

package stock_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComingProductServiceClient is the client API for ComingProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComingProductServiceClient interface {
	Create(ctx context.Context, in *CreateComingProduct, opts ...grpc.CallOption) (*ComingProduct, error)
	GetById(ctx context.Context, in *ComingProductPrimaryKey, opts ...grpc.CallOption) (*ComingProduct, error)
	GetList(ctx context.Context, in *GetListComingProductRequest, opts ...grpc.CallOption) (*GetListComingProductResponse, error)
	Update(ctx context.Context, in *UpdateComingProduct, opts ...grpc.CallOption) (*ComingProduct, error)
	Delete(ctx context.Context, in *ComingProductPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
}

type comingProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComingProductServiceClient(cc grpc.ClientConnInterface) ComingProductServiceClient {
	return &comingProductServiceClient{cc}
}

func (c *comingProductServiceClient) Create(ctx context.Context, in *CreateComingProduct, opts ...grpc.CallOption) (*ComingProduct, error) {
	out := new(ComingProduct)
	err := c.cc.Invoke(ctx, "/stock_service.ComingProductService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comingProductServiceClient) GetById(ctx context.Context, in *ComingProductPrimaryKey, opts ...grpc.CallOption) (*ComingProduct, error) {
	out := new(ComingProduct)
	err := c.cc.Invoke(ctx, "/stock_service.ComingProductService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comingProductServiceClient) GetList(ctx context.Context, in *GetListComingProductRequest, opts ...grpc.CallOption) (*GetListComingProductResponse, error) {
	out := new(GetListComingProductResponse)
	err := c.cc.Invoke(ctx, "/stock_service.ComingProductService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comingProductServiceClient) Update(ctx context.Context, in *UpdateComingProduct, opts ...grpc.CallOption) (*ComingProduct, error) {
	out := new(ComingProduct)
	err := c.cc.Invoke(ctx, "/stock_service.ComingProductService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comingProductServiceClient) Delete(ctx context.Context, in *ComingProductPrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/stock_service.ComingProductService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComingProductServiceServer is the server API for ComingProductService service.
// All implementations must embed UnimplementedComingProductServiceServer
// for forward compatibility
type ComingProductServiceServer interface {
	Create(context.Context, *CreateComingProduct) (*ComingProduct, error)
	GetById(context.Context, *ComingProductPrimaryKey) (*ComingProduct, error)
	GetList(context.Context, *GetListComingProductRequest) (*GetListComingProductResponse, error)
	Update(context.Context, *UpdateComingProduct) (*ComingProduct, error)
	Delete(context.Context, *ComingProductPrimaryKey) (*empty.Empty, error)
	mustEmbedUnimplementedComingProductServiceServer()
}

// UnimplementedComingProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComingProductServiceServer struct {
}

func (UnimplementedComingProductServiceServer) Create(context.Context, *CreateComingProduct) (*ComingProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedComingProductServiceServer) GetById(context.Context, *ComingProductPrimaryKey) (*ComingProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedComingProductServiceServer) GetList(context.Context, *GetListComingProductRequest) (*GetListComingProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedComingProductServiceServer) Update(context.Context, *UpdateComingProduct) (*ComingProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedComingProductServiceServer) Delete(context.Context, *ComingProductPrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedComingProductServiceServer) mustEmbedUnimplementedComingProductServiceServer() {}

// UnsafeComingProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComingProductServiceServer will
// result in compilation errors.
type UnsafeComingProductServiceServer interface {
	mustEmbedUnimplementedComingProductServiceServer()
}

func RegisterComingProductServiceServer(s grpc.ServiceRegistrar, srv ComingProductServiceServer) {
	s.RegisterService(&ComingProductService_ServiceDesc, srv)
}

func _ComingProductService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComingProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComingProductServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.ComingProductService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComingProductServiceServer).Create(ctx, req.(*CreateComingProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComingProductService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComingProductPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComingProductServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.ComingProductService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComingProductServiceServer).GetById(ctx, req.(*ComingProductPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComingProductService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListComingProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComingProductServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.ComingProductService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComingProductServiceServer).GetList(ctx, req.(*GetListComingProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComingProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComingProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComingProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.ComingProductService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComingProductServiceServer).Update(ctx, req.(*UpdateComingProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComingProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComingProductPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComingProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock_service.ComingProductService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComingProductServiceServer).Delete(ctx, req.(*ComingProductPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ComingProductService_ServiceDesc is the grpc.ServiceDesc for ComingProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComingProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock_service.ComingProductService",
	HandlerType: (*ComingProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ComingProductService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ComingProductService_GetById_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ComingProductService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ComingProductService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ComingProductService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coming_product_serivce.proto",
}
